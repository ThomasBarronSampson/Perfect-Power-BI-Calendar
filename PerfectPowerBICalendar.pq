let
    Source = Sales,
    MinDate = Date.From(Date.StartOfYear(List.Min(Source[OrderDate]))),
    EndDate = Date.From(DateTime.LocalNow()),
    AllDates = List.Dates(MinDate, Duration.Days(EndDate - MinDate)+1, #duration(1,0,0,0)),
    ToTable = Table.FromList(AllDates, Splitter.SplitByNothing()),
    RenamedColumns = Table.RenameColumns(ToTable,{{"Column1", "CalendarDate"}}),
    InsertYear = Table.AddColumn(RenamedColumns, "Year", each Date.Year([CalendarDate]), Int64.Type),
    InsertQuarter = Table.AddColumn(InsertYear, "Quarter", each Date.QuarterOfYear([CalendarDate]), Int64.Type),
    InsertMonth = Table.AddColumn(InsertQuarter, "Month", each Date.Month([CalendarDate]), Int64.Type),
    InsertDay = Table.AddColumn(InsertMonth, "Day", each Date.Day([CalendarDate]), Int64.Type),
    InsertWeekNumber = Table.AddColumn(InsertDay, "WeekNumber", each Date.WeekOfYear([CalendarDate]), Int64.Type),
    InsertWeekDay = Table.AddColumn(InsertWeekNumber, "WeekDay", each Date.DayOfWeek([CalendarDate])+1, Int64.Type),
    InsertMonthName = Table.AddColumn(InsertWeekDay, "MonthName", each Date.ToText([CalendarDate], "MMMM"), Text.Type),
    InsertDayName = Table.AddColumn(InsertMonthName, "DayName", each Date.ToText([CalendarDate], "dddd"), Text.Type),
    InsertDayOfYear = Table.AddColumn(InsertDayName, "DayOfYear", each Date.DayOfYear([CalendarDate]), Int64.Type),
    InsertWeekend = Table.AddColumn(InsertDayOfYear, "IsWeekend", each if Date.DayOfWeek([CalendarDate], Day.Monday) >= 5 then "Weekend" else "Weekday", Text.Type),
    InsertRelativeDate = Table.AddColumn(InsertWeekend, "RelativeDate", each Duration.Days([CalendarDate] - EndDate), Int64.Type),
    InsertRelativePeriod = Table.AddColumn(InsertRelativeDate, "RelativePeriod", each -(Date.Year([CalendarDate])*12 + Date.Month([CalendarDate]) - (Date.Year(EndDate)*12 + Date.Month(EndDate)) ) * -1, Int64.Type),
    InsertDateKey = Table.AddColumn(InsertRelativePeriod, "DateKey", each [Year]*10000 + [Month]*100 + [Day], Int64.Type),
    InsertFiscalPYDate = Table.AddColumn(InsertDateKey, "FiscalPYDate", each Date.AddYears([CalendarDate], -1), Date.Type),
    InsertFiscalYearNumber = Table.AddColumn(InsertFiscalPYDate, "FiscalYearNumber", each [Year], Int64.Type),
    InsertFiscalQuarterNumber = Table.AddColumn(InsertFiscalYearNumber, "FiscalQuarterNumber", each [Quarter], Int64.Type),
    InsertFiscalPeriodNumber = Table.AddColumn(InsertFiscalQuarterNumber, "FiscalPeriodNumber", each [Month], Int64.Type),
    InsertPeriodNum = Table.AddColumn(InsertFiscalPeriodNumber, "PeriodNum", each [Month], Int64.Type),
    InsertFiscalPPDate = Table.AddColumn(InsertPeriodNum, "FiscalPPDate", each Date.AddMonths([CalendarDate], -1), Date.Type),
    InsertFiscalPQDate = Table.AddColumn(InsertFiscalPPDate, "FiscalPQDate", each Date.AddQuarters([CalendarDate], -1), Date.Type),
    InsertFiscalPriorPeriodYearNumber = Table.AddColumn(InsertFiscalPQDate, "FiscalPriorPeriodYearNumber", each Date.Year([FiscalPPDate]), Int64.Type),
    InsertMonthYear = Table.AddColumn(InsertFiscalPriorPeriodYearNumber, "MonthYear", each Text.Start(Date.MonthName([CalendarDate]),3) & "-" & Text.End(Text.From(Date.Year([CalendarDate])),2)),
    InsertYearQuarter = Table.AddColumn(InsertMonthYear, "YearQuarter", each Text.From(Date.Year([CalendarDate])) & "-Q" & Text.From(Date.QuarterOfYear([CalendarDate])))
	InsertJDEJulianDate = Table.AddColumn(InsertYearQuarter, "JDEJulianDate", each (Date.Year([CalendarDate]) - 1900) * 1000 + [CalendarDate] - Date.From(Date.StartOfYear([CalendarDate])) + 1, Int64.Type)
in
    InsertJDEJulianDate
